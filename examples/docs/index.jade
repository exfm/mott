html
    head
        title mott - build faster.
        link(href="app.css", rel="stylesheet")
    body


    div.container-narrow

        div.wrap

            div.jumbotron
                h1 mott
                p.lead
                    | build faster.

                p
                    | more than just a static site generator

            div.row-fluid.marketing
                div.span12
                    h2 start

                    pre
                        code mkdir myapp && npm install -g git://github.com/imlucas/mott.git && mott

                    :markdown

                        Have a look at the generated code in the generated `mott.js` file.
                        This site is built using mott.

                    p
                        | mott was originally created to help build the exfm phonegap
                        | app.  it started out as a dozen or so grunt.js tasks.
                        | after open sourcing it, i realized there was a lot about
                        | that code that stunk; too fragile, too coupled to the
                        | exfm architecture, not reusable.  It could do more.

                    p
                        | originally i didn't want mott.  i justed wanted something
                        | that fit my work flow.  after months of bending other tools,
                        | i took some time to tear the original code down and
                        | figure out what it was i actually wanted.

                    ul
                        li reuse amazing modules
                        li make the configuration as reusable as any other module

                    p
                        | the features i originally wanted

                    ul
                        li browserify to simplify dependecy management
                        li robust client side templating
                        li `lang.json` support
                        li compress design assets
                        li incremental deploys to S3
                        li smoke test before deploying with `PhantomJS`
                        li helpers for debugging, particularly on mobile (`weinre`, `chrome debugger`)
                        li rebuild/reload on change

                    p
                        | the point here is not just to create make in javascript.
                        | there are plenty of solutions that already do that.
                        | the raison d'etre of mott is to modularize the
                        | boilerplate and the configuration of that boilerplate.
                        | mott works great when used with make, grunt, jake, or
                        | any of the other make improvements.  i've actually
                        | added a few things already and removed them because they're
                        | just better in make or bash.

                    p
                        | as little configuration to it as you want.
                        pre
                            code require('mott').starter().cli();
                        | eventually you'll be down to
                        pre
                            code require('mott').cook(require('my-usual-setup')).cli();
                        | and that one line of code will do all sorts of crazy things!
                        | and you can manage it through package.json
                        pre
                            code
                                | "dependencies": {
                                |     "mott": "0.1.0",
                                |     "my-usual-setup": "git://github.com/imlucas/mott-my-usual-setup.git"
                                | }

                    p
                        | so, how does it all work?  the basic unit is a step,
                        | say run browserify on some js files.  each step is
                        | assumed to be async and is as simple as a name and
                        | a callback.  the callback gets two arguments: a context, more on that later,
                        | and a done callback.  a context is like a request object
                        | in express.  its very thin api for a step to interact
                        | with the rest of the world.  contexts are mutable.
                        | other steps can pin on extra functionality (like dev server -> watch).
                        | before a context is ever handed to a step, it's prepared;
                        | globs are expanded to full paths, short hand options
                        | are blown up to their full version, unicorns and bubblegums
                        | rain from the heavens.  steps can then be bundled up
                        | into tasks, to be run in parallel or run sequentially.

                    p
                        | (environments are wip) you can also specify different environments that override
                        | config values (deploy to this S3 bucket for production,
                        | and this one for staging).  steps can also as expected
                        | easily do different things for different environments;
                        | add sourcemaps to browserify'd files in development,
                        | minfiy css for production.

            div.row-fluid.marketing
                div.span4
                    h4 this site
                    p Simple jade templates, less, and bootstrap

                div.span4
                    h4 phonegap
                    p less, browserify, and cordova

                div.span3
                    h4 hmmm
                    p dont know yet

    script(src="socket.io/socket.io.js")
    script(src="app.js")