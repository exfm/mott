html
    head
        title mott - build faster.
        link(href="app.css", rel="stylesheet")
    body

    div.container
        div.row-fluid
            div#sidebar.span3
                div#sidebar-inner
                    h1 mott
                    p.lead
                        | build faster
                    p
                        | more than just a static site generator,
                        | compose your applications and use all your
                        | new found free-time on bespoke SOAP API's.

                    iframe(src="http://ghbtns.com/github-btn.html?user=imlucas&repo=mott&type=watch&count=true", allowtransparency="true", frameborder="0", scrolling="0", height="22")

                    a.twitter-follow-button(href="https://twitter.com/__lucas", data-show-count="false")

            div#content.span9
                div.row-fluid
                    div.span12
                        h2 huh?  what is it good for?

                        h2 getting started
                        p
                            pre
                                code
                                | # install mott from npm
                                | npm install -g mott
                                | &nbsp;
                                | # initialize a new project
                                | mott new my-app
                                | &nbsp;
                                | cd my-app;
                                | # starts a local development server on localhost:8080
                                | npm start
                                | &nbsp;
                                | # setup repo
                                | git init
                                | git remote add origin https://github.com/your-username/my-app.git
                                | git add package.json
                                | git commit -m "Initial commit."
                                | &nbsp;
                                | # deploy to github pages
                                | npm run-script deploy

                        p to add to an existing project, create or add this to package.json
                            pre
                                code
                                | "dependencies": {
                                |     "mott": "0.1.x",
                                |     "mott-starter": "0.0.x"
                                | },
                                | "mott": {
                                |     "recipe": {
                                |         "use": "mott-starter",
                                |         "metadata": {}
                                |     }
                                | }


                div.row-fluid
                    div.span12
                        h2 package.json

                        p so how does mott find out about all of this stuff?
                            | the world doesnt need another configuration file or
                            | format.  we already have a package.json file
                            | and so mott just uses that.

                        p
                            pre
                                code
                                | {
                                |     "name": "my-app",
                                |     "version": "0.0.0",
                                |     "scripts": {
                                |         "start": "DEBUG=mott:* ./node_modules/.bin/mott run",
                                |         "deploy": "DEBUG=mott:* ./node_modules/.bin/mott deploy"
                                |     }
                                |     "dependencies": {
                                |         "mott": "0.1.0",
                                |         "mott-starter": "0.0.1"
                                |     },
                                |     "mott": {
                                |         "recipe": {
                                |             "use": "mott-starter"
                                |         }
                                |     }
                                | }

                        p all keys specified in mott.recipe above are specific to
                            | your application.  the special key mott.recipe.metadata
                            | contains your setup, described in more detail below.
                            | another special key is use, which allows you to specify
                            | one of more recipes to inherit from.  all other keys
                            | of mott.recipe.* are task declarations, which again you
                            | can find more about below.

                        p all keys specified in mott.*, excluding mott.recipe,
                            | are environments you can create. for example

                        p
                            pre
                                code
                                | ...
                                | "mott": {
                                |     "recipe": {
                                |         "use": "mott-starter"
                                |     },
                                |     "production": {
                                |        "url": "http://ex.fm",
                                |        "deploy": "s3://myaccessid:secretkey@bucketname/subkey"
                                |     }
                                | }
                                | ...

                        p so when you specify NODE_ENV or --env from the command line,
                            | these values will override values in mott.recipe.metadata.

                        h2 package-local.json

                        p sometimes you have values you don't want to be checked in
                            | to your repository;  for example, AWS API credentials.
                            | for those types of cases, mott supports a package-local.json
                            | file you can use to specify those values.

                        p
                            pre
                                code
                                | {
                                |     "mott": {
                                |         "production": {
                                |             "deploy": "s3://myaccessid:secretkey@bucketname/subkey"
                                |         }
                                |     }
                                | }

                        h2 deploying with&nbsp;
                            a(href="http://wercker.com") wercker
                        p
                        | set up your repo as a wercker application and use the below
                        | as your wercker.yml

                        p
                            pre
                                code
                                | # mott wercker.yml
                                | box: wercker/nodejs
                                | build:
                                |   steps:
                                |     - npm-install
                                | deploy:
                                |   steps:
                                |     -  script:
                                |         name: mott-deploy
                                |         code: |-
                                |           npm run-script deploy

                        h2 versioning with&nbsp;
                            a(href="http://github.com/imlucas/node-sterno.com") sterno

                        p sterno provides a simple way to manage versioning
                            | for mobile deployments.  if appcache worked, sterno wouldn't
                            | need to exist.  mott has a built-in step for generating
                            | sterno bootstrap files.

                        p
                            pre
                                code
                                | ...
                                | "mott": {
                                |     "recipe": {
                                |         "use": "mott-starter",
                                |         "build": ["write bootstrap"]
                                |     }
                                | }
                                | ...

                        h2 adhoc steps

                        p a step does not have to be defined in a recipe to be used by your app.  you can just include a path to a script like&nbsp;
                            a(href="https://github.com/imlucas/mott/blob/master/examples/docs/mott/fix-bootstrap-img-paths.js") this site does

                        p
                            pre
                                code
                                | ...
                                | "mott": {
                                |     "recipe": {
                                |         "use": "mott-starter",
                                |         "build": ["./mott/fix-bootstrap-img-paths.js"]
                                |     }
                                | }
                                | ...

                        h2 about
                        p
                            | mott was originally created to help build the exfm phonegap
                            | app.  it started out as a dozen or so grunt.js tasks.
                            | after open sourcing it, i realized there was a lot about
                            | that code that stunk; too fragile, too coupled to the
                            | exfm architecture, not reusable.  It could do more.

                        p
                            | originally i didn't want mott.  i justed wanted something
                            | that fit my work flow.  after months of bending other tools,
                            | i took some time to tear the original code down and
                            | figure out what it was i actually wanted.

                        ul
                            li reuse amazing modules
                            li make the configuration as reusable as any other module
                            li composable configuration

                        p
                            | the features i originally wanted

                        ul
                            li browserify to simplify dependecy management
                            li robust client side templating
                            li `lang.json` support
                            li compress design assets
                            li incremental deploys to S3
                            li smoke test before deploying with `PhantomJS`
                            li helpers for debugging, particularly on mobile (`weinre`, `chrome debugger`)
                            li rebuild/reload on change

                        p
                            | the point here is not just to create make in javascript.
                            | there are plenty of solutions that already do that.
                            | the raison d'etre of mott is to modularize the
                            | boilerplate and the configuration of that boilerplate.
                            | mott works great when used with make, grunt, jake, or
                            | any of the other make improvements.  i've actually
                            | added a few things already and removed them because they're
                            | just better in make or bash.

                        h2 the works
                        p
                            | so, how does it all work?
                            | it may sound like a lot, but it's really not.
                            | the amount of code here is really reall tiny.
                            | it just provides an environment to play in.
                            | almost all of the action happens in steps.
                            | the basic unit is a step,
                            | say run browserify on some js files.  each step is
                            | assumed to be async and is as simple as a name and
                            | a callback.  the callback gets two arguments: a
                            | context, more on that later,
                            | and a done callback.

                        p
                            | i've already written some, in lib/steps
                            | to take care of my workflow.  these should probably
                            | be moved out of the main package but i digress.
                            | steps can then be bundled up
                            | into tasks.
                            | tasks and steps can be packaged up into nice little
                            | recipes; use requirejs and sass for this client,
                            | less and browserify and dust.js for this other guy,
                            | this one should be a phonegap app, etc, etc.

                        h3 recipe.metadata
                        p
                            | metadata is the
                            | runtime configuration for a recipe.
                            | your metadata is what
                            | specifies the tooling configuration for project.
                            | for example, to tell mott
                            | copy these png's from node_modules
                            | (node_modules/my-app-design-aseets/**/*.png)
                            | and put them in /images/$1/$2.png (see what i did
                            | there?), run js/main.js through browserify and spit
                            | that out as app.js you would want metadata like

                        p
                            pre
                                code
                                | {
                                |     ...
                                |     "mott": {
                                |         "recipe": {
                                |             "metadata": {
                                |                 "js": {
                                |                     "./main.js": "./app.js"
                                |                 },
                                |                 "includes": {
                                |                     "node_modules/bootstrap/img/*.png": "img/$1.png"
                                |                 }
                                |             }
                                |         }
                                |     }
                                |     ...
                                | }

                        h3 recipe.environments
                        p
                            | you can also specify
                            | different environments that override
                            | config values (deploy to this S3 bucket for
                            | production, and this one for staging).  steps can
                            | also as expected easily do different things for
                            | different environments; add sourcemaps to
                            | browserify'd files in development,
                            | minfiy css for production.

                        h3 recipe.cookbook
                        p
                            | cookbooks bring it all together and are an api for
                            | working with your project (note: a project could
                            | have many recipes, ie mobile web and phonegap ios and
                            | chrome package app.  i like modularization a lot,
                            | but you shouldn't have to use it for all your
                            | recipes. a common folder is the best sometimes.)
                            | cookbook.exec() will run a task with some options,
                            | cookbook.cli() will run as a cli.

                        p
                            | the cookbook prepares your metadata and environment
                            | to create a context and takes care of things like
                            | expanding globs you specify in your metadata.


                        h3 recipe.ctx
                        p
                            | environments override metadata to create a context.
                            | the context is like a request object in express or
                            | the env object if your coming from fabric and python.
                            | ctx can be decorated with functions by recipes and steps.

                        p
                            | ctx also contains a few helper functions that make
                            | writing steps much easier.  you can find more
                            | on that in the Context documentation.


                        h2 compare

                        h3 app assemblers

                        ul
                            li
                                a(href="http://brunch.io") brunch
                                &mdash; A lightweight approach to building HTML5 applications with an emphasis on elegance and simplicity
                            li
                                a(href="https://github.com/buildjs/recipe") recipe.js
                                &mdash; Web Component Recipe Helpers
                            li
                                a(href="http://assemble.io") assemble
                                &mdash; Grunt.js plugin. Assemble makes it dead simple to build modular sites, documentation and components from reusable templates and data
                            li
                                a(href="http://mimosajs.com") mimosa
                                &mdash; A modern browser development toolkit

                        h2 api

                        p @todo



    script(src="socket.io/socket.io.js")
    script(src="app.js")
    script(src="//platform.twitter.com/widgets.js")
